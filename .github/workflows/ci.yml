name: "CI"
on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21
      - name: vet
        run: go vet ./...
      - name: build
        run: make build
      - name: test
        run: make test

---

name: "Release Build"
on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Set Release Version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            extension: ""
          - os: macos-latest
            platform: darwin
            arch: arm64
            extension: ""
          - os: windows-latest
            platform: windows
            arch: amd64
            extension: ".exe"
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Set Release Version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build
        shell: bash
        run: |
          GOOS=${{ matrix.platform }} GOARCH=${{ matrix.arch }} go build -ldflags "-s -w -X main.version=${{ env.RELEASE_VERSION }}" -o mysql-tester${{ matrix.extension }} ./src
      
      - name: Create binary archive
        shell: bash
        run: |
          mkdir -p release
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            zip -j release/mysql-tester-${{ env.RELEASE_VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.zip mysql-tester${{ matrix.extension }}
          else
            tar -czf release/mysql-tester-${{ env.RELEASE_VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz mysql-tester${{ matrix.extension }}
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./release/mysql-tester-${{ env.RELEASE_VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.platform == 'windows' && 'zip' || 'tar.gz' }}
          asset_name: mysql-tester-${{ env.RELEASE_VERSION }}-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.platform == 'windows' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.platform == 'windows' && 'application/zip' || 'application/gzip' }}
